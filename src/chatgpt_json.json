[
    {
        "case": 0,
        "choices": [
            "1. C89",
            "2. C99",
            "3. C11",
            "4. C++"
        ],
        "correct_answer": "2",
        "explanation": "복합 리터럴은 C99 규격에서 새롭게 도입된 기능입니다. 이를 통해 배열이나 구조체 같은 데이터 타입을 초기화할 수 있습니다.",
        "intent": "프로그래밍 언어의 버전별 특성과 변경사항을 이해하는 능력 검증",
        "question": "다음 중 복합 리터럴을 정의하는 연산자를 지원하는 C의 버전은?"
    },
    {
        "case": 0,
        "choices": [
            "1. 작동 의미론",
            "2. 표기 의미론",
            "3. 공리 의미론",
            "4. 구문 의미론"
        ],
        "correct_answer": "1",
        "explanation": "작동 의미론은 프로그램의 의미를 그 실행과정을 통해 설명하는 방법입니다. 이는 프로그램의 각 단계를 따라가며 상태 변화를 보는 방식으로 의미를 파악합니다.",
        "intent": "프로그래밍 언어의 의미론 이해와 분류할 수 있는 능력 평가",
        "question": "프로그래밍의 의미론을 설명하기 위해 사용되는 방법 중, 프로그램 실행 과정을 통해 설명하는 방법은 무엇입니까?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "우선순위가 높은 연산자가 먼저 실행됨",
        "explanation": "'a+b*c'에서 곱셈 연산자 '*'는 덧셈 연산자 '+'보다 우선순위가 높으므로 먼저 계산됩니다. 따라서 b와 c를 곱한 결과에 a를 더합니다.",
        "intent": "연산자 우선순위에 대한 이해를 테스트하고, 표현식 계산 방법을 식별할 수 있는지 평가",
        "question": "다음 표현식에서 테스트된 값을 결정하는 연산자 우선순위의 기본 원칙은 무엇입니까? 'a+b*c'"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "대입 연산자",
        "explanation": "C언어에서 연산자 우선순위 순서에 따라 삼항 조건 연산자는 대입 연산자보다 높은 우선순위를 가집니다. 따라서 삼항 조건 연산자가 먼저 평가되고 그 다음에 대입 연산자가 평가됩니다.",
        "intent": "C언어의 연산자 우선순위에 대한 이해를 평가",
        "question": "C언어에서 삼항 조건 연산자(?:) 다음에 평가되는 연산자는 무엇인가?"
    },
    {
        "case": 0,
        "choices": [
            "1. FORTRAN",
            "2. Ada",
            "3. C",
            "4. Pascal"
        ],
        "correct_answer": "3",
        "explanation": "C 언어는 후위 증감 연산자 '++'와 '--'을 제공합니다. 이 연산자들은 변수의 값을 증가하거나 감소시킨 후 평가됩니다.",
        "intent": "후위 증감 연산자를 지원하는 언어에 대한 이해를 묻는 문제입니다.",
        "question": "어느 언어가 후위 증감 연산자 '++'와 '--'을 지원합니까?"
    },
    {
        "case": 0,
        "choices": [
            "1. +",
            "2. /",
            "3. sizeof",
            "4. &&"
        ],
        "correct_answer": "3",
        "explanation": "C 언어에서 'sizeof' 연산자는 가장 높은 우선순위를 가지는 연산자 중 하나입니다. 이 연산자는 피연산자의 크기를 측정합니다.",
        "intent": "C 언어 연산자의 우선순위에 대한 이해를 평가하는 문제입니다.",
        "question": "어느 연산자가 C언어에서 우선순위가 가장 높습니까?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "Ada",
        "explanation": "Ada 언어에서 '**'는 지수 연산자로 사용되며, 우선순위가 아주 높습니다.",
        "intent": "지수 연산자를 표현하는 심볼과 관련 언어를 연결하는 지식을 평가하는 문제입니다.",
        "question": "다음 중 연산자 '**'가 지수 연산을 나타내는 프로그래밍 언어는 무엇입니까?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "false",
        "explanation": "C언어의 '&&' 연산자는 단락 평가(short-circuit evaluation)를 지원하며, x가 'false' 일 때 y의 조건은 평가되지 않습니다. 이는 성능 최적화와 에러 방지에 도움이 됩니다.",
        "intent": "단락 평가 메커니즘과 관련하여 논리적 판단력을 테스트하는 문제입니다.",
        "question": "C언어에서 조건 표현 'x && y'에서 실제로 y의 조건이 평가되지 않는 경우, x의 값은 무엇입니까?"
    },
    {
        "case": 0,
        "choices": [
            "1. 모든 조건을 무조건 평가한다.",
            "2. 첫 번째 조건이 거짓이면 두 번째 조건을 평가하지 않는다.",
            "3. 첫 번째 조건만 평가하고 두 번째 조건을 무시한다.",
            "4. 두 조건의 결과를 항상 더한다."
        ],
        "correct_answer": "2",
        "explanation": "Ada의 and then 연산자는 단락회로 평가를 사용하여 첫 번째 조건이 거짓일 경우 두 번째 조건의 평가를 건너뛰게 됩니다.",
        "intent": "Ada 언어의 particularly단락회로 평가 기능에 대한 이해를 측정합니다.",
        "question": "Ada 언어에서 and then 연산자의 기능은 무엇입니까?"
    },
    {
        "case": 0,
        "choices": [
            "1. 하나의 기호가 두 가지 이상의 용도로 사용될 수 있다.",
            "2. C++과 Ada에서 프로그래머는 중복 연산자를 직접 정의할 수 있다.",
            "3. 모든 프로그래밍 언어에서 중복 연산자의 사용이 허용된다.",
            "4. 분수 곱셈에 * 연산자를 사용할 수 있도록 정의할 수 있다."
        ],
        "correct_answer": "3",
        "explanation": "모든 프로그래밍 언어에서 중복 연산자의 사용이 허용되는 것은 아닙니다. 특정 언어에서는 허용하고 일부 언어에서는 허용하지 않을 수 있습니다.",
        "intent": "중복 연산자의 정의와 사용 범위에 대한 이해를 확인합니다.",
        "question": "중복 연산자에 관한 설명으로 옳지 않은 것은 무엇입니까?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "IF 문",
        "explanation": "FORTRAN에서 처음 도입된 조건문 구조는 IF 문입니다. 이 문은 조건에 따라 특정 코드 블럭을 실행하는 구조입니다.",
        "intent": "FORTRAN 프로그래밍 언어에 대한 기본 지식을 평가합니다.",
        "question": "FORTRAN에서 처음 도입된 조건문 구조는 무엇입니까?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "goto label;",
        "explanation": "goto 문은 label을 지정하여 프로그램의 실행 순서를 해당 위치로 바꾸는 구문으로 사용됩니다.",
        "intent": "구조적 프로그래밍 원칙에서 비권장하는 goto 문 사용법을 이해하게 합니다.",
        "question": "goto 문을 사용해 프로그램의 실행 순서를 특정 위치로 바꾸는 구문은 어떻게 표현됩니까?"
    },
    {
        "case": 0,
        "choices": [
            "1. To increase the execution speed of programs",
            "2. To enhance the readability and writability of the code",
            "3. To reduce the memory usage of programs",
            "4. To introduce new functionality into the language"
        ],
        "correct_answer": "2",
        "explanation": "Syntactic sugar is designed to make the code more intuitive and concise, therefore enhancing the readability and writability for programmers without introducing new functionality.",
        "intent": "To assess understanding of the concept and purpose of syntactic sugar in programming languages.",
        "question": "What is the main purpose of 'syntactic sugar' in programming languages?"
    },
    {
        "case": 0,
        "choices": [
            "1. It defines the meaning of a program using the theory of types.",
            "2. It describes the meaning of a program by its translation into another language.",
            "3. It explains a program's behavior through the process of its execution.",
            "4. It uses mathematical logic to explain program behavior."
        ],
        "correct_answer": "3",
        "explanation": "Operational semantics describes the meaning of a program by viewing its execution as a series of state transitions.",
        "intent": "To test the understanding of different semantic approaches in programming languages.",
        "question": "Which statement describes the operational semantics approach in programming language semantics?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "Eval(s, S) = s'",
        "explanation": "In operational semantics, a state transition is often represented by an evaluation function that maps an initial state 's' and a statement 'S' to a new state 's''.",
        "intent": "To understand the notation used in describing state transitions in operational semantics.",
        "question": "According to operational semantics, how are state transitions generally represented?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "if (<expr>) then <stmt> [else <stmt>]",
        "explanation": "The syntax provided describes an if-else statement where 'expr' evaluates the condition, followed by 'then' which executes the statement if true, optionally followed by 'else' which executes if the condition is false.",
        "intent": "To identify understanding of parsing and syntax from given language definitions.",
        "question": "According to the syntactic definition provided, what is the correct syntax for a simple if-else statement in language S?"
    },
    {
        "case": 0,
        "choices": [
            "1. Creates new variables and initializes them to 0.",
            "2. Deletes variables from the current state.",
            "3. Adds entries for declared variables to the state.",
            "4. Adds declared variables to the next state but retains their value."
        ],
        "correct_answer": "3",
        "explanation": "The 'let' statement adds new entries for declared variables to the current state, as it is used to manage the scope of variables.",
        "intent": "To test understanding of variable scoping and state manipulation through the 'let' statement in language S.",
        "question": "What does the 'let' statement in the programming language S do in terms of state manipulation?"
    },
    {
        "case": 0,
        "choices": [
            "1. Exits when a condition becomes false.",
            "2. Continuously executes a block of code.",
            "3. Executes the loop body only if the condition is initially true.",
            "4. Executes the loop until the condition becomes false."
        ],
        "correct_answer": "4",
        "explanation": "The while loop in Ada, like in many other languages, keeps executing its body as long as the loop's condition remains true. When the condition evaluates to false, the loop terminates.",
        "intent": "To evaluate the knowledge of loop control mechanisms in the Ada programming language, specifically the while loop.",
        "question": "In Ada language, what operation does the while loop perform?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "55",
        "explanation": "The sum of the first 10 positive integers (1 to 10) is 55. This is calculated by executing 'result = result + index' within the while loop in the sum procedure.",
        "intent": "To assess understanding of loop operations and arithmetic summation over an iterative process in Ada.",
        "question": "What will be the output of the 'sum' procedure in Ada if the procedure executes the loop from index 1 to 10?"
    },
    {
        "case": 1,
        "choices": "빈칸",
        "correct_answer": "New state based on the condition evaluation",
        "explanation": "The 'Eval' function either executes the first statement if the condition is true, or the second statement if false. The value returned is the new state resulting from whichever statement is executed.",
        "intent": "To check comprehension of how conditional statements affect program state in interpreter functions.",
        "question": "Based on the implementation details provided, what does the 'Eval' function compute for an 'If' statement?"
    }
]